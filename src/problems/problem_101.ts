import { Problem, Strategy } from "../Problem";
import ProblemManager from "../ProblemManager";
const title: string = "Optimum polynomial";
const description: string = "\nIf we are presented with the first k terms of a sequence it is impossible to say with certainty the value of the next term, as there are infinitely many polynomial functions that can model the sequence.\nAs an example, let us consider the sequence of cube numbers. This is defined by the generating function, un = n3: 1, 8, 27, 64, 125, 216, ...\nSuppose we were only given the first two terms of this sequence. Working on the principle that \"simple is best\" we should assume a linear relationship and predict the next term to be 15 (common difference 7). Even if we were presented with the first three terms, by the same principle of simplicity, a quadratic relationship should be assumed.\nWe shall define OP(k, n) to be the nth term of the optimum polynomial generating function for the first k terms of a sequence. It should be clear that OP(k, n) will accurately generate the terms of the sequence for n \u2264 k, and potentially the first incorrect term (FIT) will be OP(k, k+1); in which case we shall call it a bad OP (BOP).\nAs a basis, if we were only given the first term of sequence, it would be most sensible to assume constancy; that is, for n \u2265 2, OP(1, n) = u1.\nHence we obtain the following OPs for the cubic sequence:\n\nOP(1, n) = 1\n1, 1, 1, 1, ...\nOP(2, n) = 7n\u22126\n1, 8, 15, ...\nOP(3, n) = 6n2\u221211n+6\u00A0\u00A0\u00A0\u00A0\u00A0\n1, 8, 27, 58, ...\nOP(4, n) = n3\n1, 8, 27, 64, 125, ...\n\nClearly no BOPs exist for k \u2265 4.\nBy considering the sum of FITs generated by the BOPs (indicated in red above), we obtain 1 + 15 + 58 = 74.\nConsider the following tenth degree polynomial generating function:\nun = 1 \u2212 n + n2 \u2212 n3 + n4 \u2212 n5 + n6 \u2212 n7 + n8 \u2212 n9 + n10\nFind the sum of FITs for the BOPs.\n\n";
const index: number = 101;
class Solution extends Strategy {
    public validateArgs(args: any[]) {
        throw new Error("Method not implemented.");
    }
    public solve(args: any[]) {
        throw new Error("Method not implemented.");
    }
}
const solution = new Solution();
const ProblemImplementation = new Problem(title, description, solution);
ProblemManager.register(index, ProblemImplementation);
